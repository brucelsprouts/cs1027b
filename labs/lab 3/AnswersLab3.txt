Answers for Lab 2
-----------------------------------------------



EXERCISE 1

1. Should instance variable interestRate be declared as static? Explain.
No, it should not be declared as static since each instance of SavingsAccount class should have its own interest rate value
2. Write the output from the test harness for class SavingsAccount. 
Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
        The field BankAccount.balance is not visible

        at SavingsAccount.calculateInterest(SavingsAccount.java:14)
        at SavingsAccount.main(SavingsAccount.java:24)

EXERCISE 2

3. Which method(s) of the class CheckingAccount demonstrate overriding? Which methods demonstrate overloading?
the deposit and withdraw methods demonstrate overriding, and the deposit method demosntates overloading

4. Is bacc0 = chacc1 legal? Why?
yes because CheckingAccount is a subclass of BankAccount so it can be assigned to BankAccountas reference

5. Is chacc1 = bacc1 legal? Why?
no because a superclass reference cannot point to a subclass object without casting

6. On which variables bacc1, chacc1, sacc1 was the invocation to method
deductFees() valid? Explain.
the invocation to deductFees was valid on chacc1 because its an instance of CheckingAccount which has the deductFees method

7. Which compilation error(s) could be fixed through casting? Which one(s)
could not be fixed? Why?
compliation errors related to invoking methods like deductFees could be fixed with casting, and errors related to incompatible types might not be fixed

8. Why did the program crash? What kind of exception was thrown?


9. What was the runtime error obtained when changing super.deposit(amount)
to deposit(amount) in class CheckingAccount.java? 


EXERCISE 3

10. Why does the compiler issue an error message when invoking newAcc.getTransactionCount()? Why does the compiler issue an error message when invoking newAcc.getInterestRate()?
the complier issues errors becuase the methods getTransactionCount and getInterestRate are not part of the BankAccountclass and to fix this you need to cas newAcc

11. Can you tell whether in the statement String accountInfo = newAcc.toString(); the
method toString() being invoked is from the class CheckingAccount or from the class
SavingsAccount? Explain your answer.
no you cant tell without kniwing the actual type of the object newAcc is referencing at runtime and it depends on whether newAcc is pointing to an instance of CheckingAccount or SavingsAccount